buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE'
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-config:2.0.0.RELEASE'
	}
}

dependencies {
	compile project(':vault-api')

	compile "net.nlacombe:ws-utils:${depVersions.wsUtils}"
	compile 'net.nlacombe:auth-lib:10.0.0'
	compile 'net.nlacombe:common-lib:8.0.0'

	compile 'org.springframework.cloud:spring-cloud-starter-config'
	compile "org.springframework.boot:spring-boot-starter-web"
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.2.6'
	compile 'org.flywaydb:flyway-core:5.1.4'
	compile 'javax.inject:javax.inject:1'
	compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.6'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6'

	compile 'org.slf4j:slf4j-api:1.7.25'

	runtime 'mysql:mysql-connector-java:8.0.12'
	runtime 'ch.qos.logback:logback-classic:1.2.3'
	runtime 'javax.xml.bind:jaxb-api:2.3.0'
	runtime 'javax.activation:activation:1.1.1'
	runtime 'org.javassist:javassist:3.24.1-GA'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.8.0'
	testCompile 'org.mockito:mockito-core:2.24.5'
}

task buildDocker(type: Docker, dependsOn: assemble) {
	tag = "${project.name}"
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			from file('src/main/docker/')
			into stageDir
		}
	}
}

task appengineDeploy(type: Exec, dependsOn: build) {
	def appengineBuildDir = file('build/appengine/')
	def version = project.version.replaceAll('\\.', '-') + '-' + getDateTimestamp()

	workingDir appengineBuildDir
	commandLine 'gcloud', 'app', 'deploy', '-q', '-v', version

	doFirst {
		copy {
			from jar
			from file('src/main/appengine/app.yaml')
			from file('src/main/docker/')
			into appengineBuildDir
		}
	}
}

def static getDateTimestamp() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMddHHmmss')
	return formattedDate
}
