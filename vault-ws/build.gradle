buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE'
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE'
		classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-java-application'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

def awsEcrUrl = '118533919239.dkr.ecr.us-east-1.amazonaws.com'
def dockerRepo = "${awsEcrUrl}/nlacombe"

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-config:1.3.2.RELEASE'
		mavenBom 'org.springframework.cloud:spring-cloud-consul-dependencies:1.2.1.RELEASE'
	}
}

dependencies {
	compile project(':vault-api')

	compile "net.nlacombe:ws-utils:${depVersions.wsUtils}"
	compile 'net.nlacombe:auth-lib:10.0.0'
	compile 'net.nlacombe:common-lib:7.0.0'

	compile 'org.springframework.cloud:spring-cloud-starter-config'
	compile 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
	compile "org.springframework.boot:spring-boot-starter-web"
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.2.0'
	compile 'org.flywaydb:flyway-core:4.2.0'
	compile 'javax.inject:javax.inject:1'
	compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.1'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.1'

	compile 'org.slf4j:slf4j-api:1.7.25'

	runtime 'mysql:mysql-connector-java:6.0.6'
	runtime 'ch.qos.logback:logback-classic:1.2.3'

	testCompile 'junit:junit:4.12'
	testCompile 'org.assertj:assertj-core:3.8.0'
	testCompile 'org.mockito:mockito-core:2.11.0'
}

task createDockerContext(type: Copy, dependsOn: assemble) {
	from('src/main/docker')
	from('build/libs') {
		include "*.jar"
	}

	into 'build/docker'
}

task buildDockerImage(type: DockerBuildImage, dependsOn: createDockerContext) {
	inputDir = project.file('build/docker')
	tag = "${dockerRepo}:${project.name}-${project.version}"
}

task pushDockerImage(type: DockerPushImage, dependsOn: buildDockerImage) {
	imageName = buildDockerImage.tag
}
